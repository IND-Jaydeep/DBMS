---borrow15


DECLARE
    -- User Defined Exception for balance due less than 0
    bal_due_exception EXCEPTION;

    -- Variables for Fine Calculation Section
    v_roll_no NUMBER := :roll_no;  -- Replace :roll_no with user input
    v_book_name VARCHAR2(100) := :book_name;  -- Replace :book_name with user input
    v_date_of_issue DATE;
    v_days NUMBER;
    v_fine_amount NUMBER := 0;

    -- Variables for Account Activation Section
    v_rows_affected NUMBER;

    -- Variables for Salary Increment Section
    v_avg_salary NUMBER;
    v_employee_id NUMBER;
    v_old_salary NUMBER;
    v_new_salary NUMBER;

    -- Cursor for Borrow table to fetch Date of Issue for a particular roll number and book
    CURSOR borrow_cursor IS
        SELECT DateofIssue
        FROM Borrow
        WHERE Roll_no = v_roll_no
        AND NameofBook = v_book_name
        AND Status = 'I';  -- 'I' means Issued

BEGIN
    -- SECTION 1: Handle User Defined Exception for Client Master Table
    DECLARE
        v_bal_due NUMBER;
    BEGIN
        -- Fetch the balance due for a client
        SELECT bal_due
        INTO v_bal_due
        FROM client_master
        WHERE client_id = :client_id; -- Replace :client_id with the appropriate client identifier

        -- Check if the balance due is less than 0
        IF v_bal_due < 0 THEN
            -- Raise the user-defined exception
            RAISE bal_due_exception;
        END IF;
    EXCEPTION
        WHEN bal_due_exception THEN
            -- Handle the exception (log error message)
            DBMS_OUTPUT.PUT_LINE('Error: Balance due cannot be negative!');
        WHEN OTHERS THEN
            -- Generic exception handling
            DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
    END;

    -- SECTION 2: Fine Calculation & Book Return Logic
    OPEN borrow_cursor;
    FETCH borrow_cursor INTO v_date_of_issue;
    CLOSE borrow_cursor;

    -- Calculate the number of days the book was borrowed
    v_days := TRUNC(SYSDATE) - v_date_of_issue;

    -- Calculate the fine based on the number of days
    IF v_days BETWEEN 15 AND 30 THEN
        v_fine_amount := v_days * 5;  -- Rs 5 per day fine
    ELSIF v_days > 30 THEN
        v_fine_amount := v_days * 50;  -- Rs 50 per day fine
    ELSE
        v_fine_amount := 0;  -- No fine if days < 15
    END IF;

    -- If a fine exists, insert into Fine table
    IF v_fine_amount > 0 THEN
        INSERT INTO Fine (Roll_no, Date, Amt) 
        VALUES (v_roll_no, SYSDATE, v_fine_amount);
    END IF;

    -- Update the status of the book from 'I' (Issued) to 'R' (Returned)
    UPDATE Borrow
    SET Status = 'R'
    WHERE Roll_no = v_roll_no
    AND NameofBook = v_book_name
    AND Status = 'I';

    COMMIT;  -- Commit the transaction for fine and book return

    DBMS_OUTPUT.PUT_LINE('Fine Amount: Rs ' || v_fine_amount);

    -- SECTION 3: Activating Inactive Accounts
    UPDATE accounts
    SET status = 'active'
    WHERE last_transaction_date < SYSDATE - 365
    AND status = 'inactive';

    -- Get the number of rows affected
    v_rows_affected := SQL%ROWCOUNT;

    -- Provide feedback on the number of accounts updated
    IF v_rows_affected > 0 THEN
        DBMS_OUTPUT.PUT_LINE(v_rows_affected || ' accounts have been activated.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('No accounts were found to be activated.');
    END IF;

    COMMIT;  -- Commit the update for accounts

    -- SECTION 4: Salary Increment and Logging
    -- Get the average salary of all employees
    SELECT AVG(salary)
    INTO v_avg_salary
    FROM employees;

    -- Loop through employees with salary less than the average salary
    FOR emp_record IN (
        SELECT employee_id, salary
        FROM employees
        WHERE salary < v_avg_salary
    ) LOOP
        v_employee_id := emp_record.employee_id;
        v_old_salary := emp_record.salary;
        v_new_salary := v_old_salary * 1.10;  -- Increase salary by 10%

        -- Update the employee's salary
        UPDATE employees
        SET salary = v_new_salary
        WHERE employee_id = v_employee_id;

        -- Log the salary increment in the increment_salary table
        INSERT INTO increment_salary (employee_id, old_salary, new_salary, increment_date)
        VALUES (v_employee_id, v_old_salary, v_new_salary, SYSDATE);
    END LOOP;

    COMMIT;  -- Commit the changes for salary updates and logging

    DBMS_OUTPUT.PUT_LINE('Salary increments have been successfully applied and logged.');

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No record found for the provided Roll No and Book Name.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
